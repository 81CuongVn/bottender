"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6975],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},27710:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>i,contentTitle:()=>l,metadata:()=>c,toc:()=>u,default:()=>d});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),s=["components"],i={id:"testing",title:"Testing",original_id:"testing"},l=void 0,c={unversionedId:"testing",id:"version-0.15.17/testing",isDocsHomePage:!1,title:"Testing",description:"Bottender is built with testing in mind. Your tests could be run with any JavaScript test runners, such as Jest, Mocha, AVA, and so on.",source:"@site/versioned_docs/version-0.15.17/Guides-Testing.md",sourceDirName:".",slug:"/testing",permalink:"/docs/0.15.17/testing",editUrl:"https://github.com/Yoctol/bottender/edit/master/docs/versioned_docs/version-0.15.17/Guides-Testing.md",tags:[],version:"0.15.17",lastUpdatedBy:"\u5433\u6771\u66c4 Wu, Dung-Ie",lastUpdatedAt:1636542901,formattedLastUpdatedAt:"11/10/2021",frontMatter:{id:"testing",title:"Testing",original_id:"testing"},sidebar:"version-0.15.17/docs",previous:{title:"State",permalink:"/docs/0.15.17/state"},next:{title:"CustomConnector",permalink:"/docs/0.15.17/custom-connector"}},u=[{value:"Unit Test",id:"unit-test",children:[{value:"Context Mocking",id:"context-mocking",children:[],level:3},{value:"Test Utils",id:"test-utils",children:[],level:3}],level:2},{value:"E2E Test",id:"e2e-test",children:[],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Bottender is built with testing in mind. Your tests could be run with any JavaScript test runners, such as ",(0,a.kt)("a",{parentName:"p",href:"https://facebook.github.io/jest/"},"Jest"),", ",(0,a.kt)("a",{parentName:"p",href:"https://mochajs.org/"},"Mocha"),", ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/avajs/ava"},"AVA"),", and so on."),(0,a.kt)("h2",{id:"unit-test"},"Unit Test"),(0,a.kt)("p",null,"Unit tests are tests that focus on the isolated portion of your code, and you can find bugs efficiently when the complexity of code grows as time goes on."),(0,a.kt)("p",null,"When creating bots using Bottender, the primary logic of bot is inside your event handler."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// bot.js\nconst handler = require('./handler');\n\nbot.onEvent(handler);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// handler.js\nmodule.exports = async (context) => {\n  if (context.event.isText) {\n    await context.sendText('You say: ' + context.event.text);\n  } else if (context.event.isMessage) {\n    await context.sendText('Sorry, I only read text messages.');\n  }\n};\n")),(0,a.kt)("p",null,"Then, we can start to test it with a mock context."),(0,a.kt)("h3",{id:"context-mocking"},"Context Mocking"),(0,a.kt)("p",null,"Handlers are just async functions that accept a single context argument. Now, we can use fake ones in the unit tests."),(0,a.kt)("p",null,"Here is an example test written with ",(0,a.kt)("a",{parentName:"p",href:"https://facebook.github.io/jest/"},"Jest"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// __tests__/handler.spec.js\nconst handler = require('../handler');\n\nit('should work', async () => {\n  const context = {\n    event: {\n      isMessage: true,\n      isText: true,\n      text: 'Awesome',\n      message: {\n        text: 'Awesome',\n      },\n    },\n    sendText: jest.fn(),\n  };\n\n  await handler(context);\n\n  expect(context.sendText).toBeCalledWith('You say: Awesome');\n});\n")),(0,a.kt)("p",null,"After calling the async handler, we can write some assertions to make sure that everything works as expected."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: We use ",(0,a.kt)("inlineCode",{parentName:"p"},"jest.fn")," in the example but feel free to use ",(0,a.kt)("a",{parentName:"p",href:"http://sinonjs.org/"},"Sinon")," or any other mocking libraries.")),(0,a.kt)("h3",{id:"test-utils"},"Test Utils"),(0,a.kt)("p",null,"We provide some test utils in the package for convenience purpose. It's worth mentioning ",(0,a.kt)("inlineCode",{parentName:"p"},"ContextSimulator")," here, and you can import it from ",(0,a.kt)("inlineCode",{parentName:"p"},"bottender/test-utils"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const { ContextSimulator } = require('bottender/test-utils');\n")),(0,a.kt)("p",null,"After simulator instantiated with a specific platform, you can create a mocking context with several helper methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const simulator = new ContextSimulator({\n  platform: 'messenger',\n});\n\nconst context = simulator.createTextContext('Awesome');\n")),(0,a.kt)("p",null,"And we can use created context same way as the above example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// __tests__/handler.spec.js\nconst { ContextSimulator } = require('bottender/test-utils');\n\nconst handler = require('../handler');\n\nconst simulator = new ContextSimulator({\n  platform: 'messenger',\n});\n\nit('should work', async () => {\n  const context = simulator.createTextContext('Awesome');\n\n  await handler(context);\n\n  expect(context.sendText).toBeCalledWith('You say: Awesome');\n});\n")),(0,a.kt)("h2",{id:"e2e-test"},"E2E Test"),(0,a.kt)("p",null,"Coming Soon. We are working on a brand-new end-to-end testing library for bots. We will release it in the near future."))}d.isMDXComponent=!0}}]);