"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[99189],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),c=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,h=u["".concat(d,".").concat(m)]||u[m]||p[m]||o;return t?r.createElement(h,l(l({ref:n},s),{},{components:t})):r.createElement(h,l({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=u;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},59671:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>i,contentTitle:()=>d,metadata:()=>c,toc:()=>s,default:()=>u});var r=t(87462),a=t(63366),o=(t(67294),t(3905)),l=["components"],i={id:"middleware",title:"Middleware",original_id:"middleware"},d=void 0,c={unversionedId:"middleware",id:"version-0.15.17/middleware",isDocsHomePage:!1,title:"Middleware",description:"Compose handlers.",source:"@site/versioned_docs/version-0.15.17/Guides-Middleware.md",sourceDirName:".",slug:"/middleware",permalink:"/docs/0.15.17/middleware",editUrl:"https://github.com/Yoctol/bottender/edit/master/docs/versioned_docs/version-0.15.17/Guides-Middleware.md",tags:[],version:"0.15.17",lastUpdatedBy:"\u5433\u6771\u66c4 Wu, Dung-Ie",lastUpdatedAt:1636542901,formattedLastUpdatedAt:"11/10/2021",frontMatter:{id:"middleware",title:"Middleware",original_id:"middleware"},sidebar:"version-0.15.17/docs",previous:{title:"Intents",permalink:"/docs/0.15.17/intents"},next:{title:"HTTP Server",permalink:"/docs/0.15.17/server"}},s=[{value:"API",id:"api",children:[{value:"middleware(handler1, handler2, ...)",id:"middlewarehandler1-handler2-",children:[],level:3}],level:2},{value:"Example",id:"example",children:[],level:2}],p={toc:s};function u(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Compose handlers.\nSometimes you may want to use multiple handlers to handle one event so you can reuse each of them on different situation. We provide ",(0,o.kt)("inlineCode",{parentName:"p"},"middleware")," method which enables you to compose multiple handlers in a functional style."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},'Middleware are simple functions which return a MiddlewareFunction with signature (ctx, next). When the middleware is run, it must manually invoke next() to run the "downstream" middleware.'),(0,o.kt)("p",{parentName:"blockquote"},"-- ",(0,o.kt)("cite",null,"koa"))),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("h3",{id:"middlewarehandler1-handler2-"},"middleware(","[handler1, handler2, ...]",")"),(0,o.kt)("p",null,"Compose the given handlers as a middleware and return a composed handler."),(0,o.kt)("p",null,"Handlers is an array of functions with args like below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {Object} context - A context can use all methods in client (see {@link\n *     https://github.com/Yoctol/messaging-apis}|messaging-apis}) and sessions.\n * @param {Function} next - call `next()` to pass control to the next handler.\n */\nfunction handler(context, next) {\n  /* ... */\n}\n")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { middleware } = require('bottender');\n\n...\n\nconst composedHandler = middleware([\n  function handler1(context, next) { /* ... */ },\n  function handler2(context, next) { /* ... */ },\n  ...,\n]);\n\nbot.onEvent(composedHandlers);\n\n...\n")),(0,o.kt)("p",null,"Each event came from bot will be handled by function handler1."),(0,o.kt)("p",null,"Call ",(0,o.kt)("inlineCode",{parentName:"p"},"next()")," in function handler1 and it will go to function handler2."),(0,o.kt)("p",null,"more ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Yoctol/bottender/tree/v0.15.x/examples/middleware"},"example")," for middleware."))}u.isMDXComponent=!0}}]);