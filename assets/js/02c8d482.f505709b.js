"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[47274],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),i=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=i(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=i(n),m=r,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var i=2;i<o;i++)l[i]=n[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},14640:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>s,contentTitle:()=>p,metadata:()=>i,toc:()=>c,default:()=>d});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),l=["components"],s={id:"advanced-guides-multi-channel",title:"Multi-Messaging Channel Support",original_id:"advanced-guides-multi-channel"},p=void 0,i={unversionedId:"advanced-guides-multi-channel",id:"version-1.0.5/advanced-guides-multi-channel",isDocsHomePage:!1,title:"Multi-Messaging Channel Support",description:"Build a Cross-Platform Bot",source:"@site/versioned_docs/version-1.0.5/multi-messaging-channel-support.md",sourceDirName:".",slug:"/advanced-guides-multi-channel",permalink:"/docs/1.0.5/advanced-guides-multi-channel",editUrl:"https://github.com/Yoctol/bottender/edit/master/docs/versioned_docs/version-1.0.5/multi-messaging-channel-support.md",tags:[],version:"1.0.5",lastUpdatedBy:"\u5433\u6771\u66c4 Wu, Dung-Ie",lastUpdatedAt:1636542901,formattedLastUpdatedAt:"11/10/2021",frontMatter:{id:"advanced-guides-multi-channel",title:"Multi-Messaging Channel Support",original_id:"advanced-guides-multi-channel"},sidebar:"version-1.0.5/docs",previous:{title:"Natural Language Understanding",permalink:"/docs/1.0.5/advanced-guides-nlu"},next:{title:"Messenger Setup",permalink:"/docs/1.0.5/channel-messenger-setup"}},c=[{value:"Build a Cross-Platform Bot",id:"build-a-cross-platform-bot",children:[],level:2},{value:"Set up Each Platform",id:"set-up-each-platform",children:[],level:2},{value:"Enable Each Channel for the Apps",id:"enable-each-channel-for-the-apps",children:[],level:2},{value:"Develop the Action",id:"develop-the-action",children:[],level:2},{value:"Define Platform-Specific Actions",id:"define-platform-specific-actions",children:[],level:2}],u={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"build-a-cross-platform-bot"},"Build a Cross-Platform Bot"),(0,o.kt)("p",null,"Through Bottender, we can build chatbots that support multiple platforms at the same time. In other words, we can develop only one action to handle messages from different platforms such as Messenger, LINE, Telegram, etc."),(0,o.kt)("p",null,"There are three steps to set up a simple cross-platform bot:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Set up each platform"),(0,o.kt)("li",{parentName:"ol"},"Enable each channel for the App"),(0,o.kt)("li",{parentName:"ol"},"Develop the action")),(0,o.kt)("h2",{id:"set-up-each-platform"},"Set up Each Platform"),(0,o.kt)("p",null,"To build a cross-platform bot, we have to set up each platform first. We can set up the platforms by following these guides:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://bottender.js.org/docs/channel-messenger-setup"},"Messenger Setup")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://bottender.js.org/docs/channel-line-setup"},"LINE Setup")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://bottender.js.org/docs/channel-slack-setup"},"Slack Setup")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://bottender.js.org/docs/channel-telegram-setup"},"Telegram Setup")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://bottender.js.org/docs/channel-viber-setup"},"Viber Setup"))),(0,o.kt)("p",null,"After we set up for the platforms which we want to handle, we have to put the required values to the ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},".env")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"MESSENGER_PAGE_ID=\nMESSENGER_ACCESS_TOKEN=\nMESSENGER_APP_ID=\nMESSENGER_APP_SECRET=\nMESSENGER_VERIFY_TOKEN=\n\nLINE_ACCESS_TOKEN=\nLINE_CHANNEL_SECRET=\n\nTELEGRAM_ACCESS_TOKEN=\n\nSLACK_ACCESS_TOKEN=\nSLACK_VERIFICATION_TOKEN=\n\nVIBER_ACCESS_TOKEN=\n")),(0,o.kt)("h2",{id:"enable-each-channel-for-the-apps"},"Enable Each Channel for the Apps"),(0,o.kt)("p",null,"Next, we have to enable the channel we want to handle in the ",(0,o.kt)("inlineCode",{parentName:"p"},"bottender.config.js")," file."),(0,o.kt)("p",null,"For example, if we want to enable our bot to support Messenger, we have to set ",(0,o.kt)("inlineCode",{parentName:"p"},"channels.messenger.enabled")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"bottender.config.js")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = {\n  channels: {\n    messenger: {\n      enabled: true,\n      path: '/webhooks/messenger',\n      pageId: process.env.MESSENGER_PAGE_ID,\n      accessToken: process.env.MESSENGER_ACCESS_TOKEN,\n      appId: process.env.MESSENGER_APP_ID,\n      appSecret: process.env.MESSENGER_APP_SECRET,\n      verifyToken: process.env.MESSENGER_VERIFY_TOKEN,\n    },\n    line: {\n      enabled: true,\n      path: '/webhooks/line',\n      accessToken: process.env.LINE_ACCESS_TOKEN,\n      channelSecret: process.env.LINE_CHANNEL_SECRET,\n    },\n    telegram: {\n      enabled: true,\n      path: '/webhooks/telegram',\n      accessToken: process.env.TELEGRAM_ACCESS_TOKEN,\n    },\n    slack: {\n      enabled: true,\n      path: '/webhooks/slack',\n      accessToken: process.env.SLACK_ACCESS_TOKEN,\n      verificationToken: process.env.SLACK_VERIFICATION_TOKEN,\n    },\n    viber: {\n      enabled: true,\n      path: '/webhooks/viber',\n      accessToken: process.env.VIBER_ACCESS_TOKEN,\n      sender: {\n        name: 'xxxx',\n      },\n    },\n  },\n};\n")),(0,o.kt)("h2",{id:"develop-the-action"},"Develop the Action"),(0,o.kt)("p",null,"Now, we can develop an action to handle messages from different platforms. We can use ",(0,o.kt)("a",{parentName:"p",href:"https://bottender.js.org/docs/api-context#platform"},(0,o.kt)("inlineCode",{parentName:"a"},"context.platform"))," in our App to tell which platform the messages are coming from."),(0,o.kt)("p",null,"Here, we develop a simple action that replies to the users with the platform they are using."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = async function App(context) {\n  await context.sendText(`Hello World. Platform: ${context.platform}`);\n};\n")),(0,o.kt)("p",null,"You can check out the repository of the above example ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Yoctol/bottender/tree/master/examples/multiple-channels"},"here"),"."),(0,o.kt)("h2",{id:"define-platform-specific-actions"},"Define Platform-Specific Actions"),(0,o.kt)("p",null,"Different platforms support some different advanced events for better user experience. For example, Messenger supports Button Template while LINE supports Flex Message. Therefore, we might want to define some platform-specific actions to handle these advanced events."),(0,o.kt)("p",null,"To better organize bot actions, we can use ",(0,o.kt)("inlineCode",{parentName:"p"},"router")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"platform")," functions from ",(0,o.kt)("inlineCode",{parentName:"p"},"bottender/router")," to handle routing between different platforms."),(0,o.kt)("p",null,"In the example app, we define two additional actions to leverage the platform-specific events."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { platform, router } from 'bottender/router';\n\nasync function LineAction(context) {\n  await context.sendFlex('This is a line-specific message!', {\n    type: 'bubble',\n    body: {\n      type: 'box',\n      layout: 'horizontal',\n      contents: [\n        {\n          type: 'text',\n          text: 'Hello,',\n        },\n        {\n          type: 'text',\n          text: 'World',\n        },\n      ],\n    },\n  });\n}\n\nasync function MessengerAction(context) {\n  await context.sendButtonTemplate('This is a messenger-specific message!', [\n    {\n      type: 'postback',\n      title: 'Hello',\n      payload: 'Hello',\n    },\n    {\n      type: 'postback',\n      title: 'World',\n      payload: 'World',\n    },\n  ]);\n}\n\nmodule.exports = async function App(context) {\n  return router([\n    platform('line', LineAction),\n    platform('messenger', MessengerAction),\n  ]);\n};\n")))}d.isMDXComponent=!0}}]);